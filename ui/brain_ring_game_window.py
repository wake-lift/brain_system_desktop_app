from PyQt6.QtCore import Qt
from PyQt6.QtWidgets import QHBoxLayout, QMainWindow

from config.enums import ColorSchemaEnum
from core.mixins import WidgetBuilderMixin
from ui.autogenerated.brain_ring_game_window_autogenerated import Ui_BrainRingGameWindow
from core.widgets import ScalableLabel, ScalableColoredSvgWidget
from ui.widgets.signal_widget import ArcLocationEnum, SignalArcWidget


class BrainRingGameWindow(QMainWindow, Ui_BrainRingGameWindow, WidgetBuilderMixin):
    """Класс, описывающий структуру информационного окна игры "Брейн-ринг"."""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.brain_ring_game_window_central_widget.setStyleSheet(
            f'background-color: {ColorSchemaEnum.BRAIN_GAME_WIDGET_BACKGROUND};',
        )
        # наибольший индекс виджета, отображаемого на панели заблокированных игроков
        self.max_displayed_blocked_player_indicator_idx: int = 0

        self.left_signal_widget = SignalArcWidget(
            arc_location=ArcLocationEnum.LEFT,
            infill_color=ColorSchemaEnum.BRAIN_SIGNAL_WIDGET,
        )
        self.right_signal_widget = SignalArcWidget(
            arc_location=ArcLocationEnum.RIGHT,
            infill_color=ColorSchemaEnum.BRAIN_SIGNAL_WIDGET,
        )
        self.left_signal_widget.hide()
        self.right_signal_widget.hide()
        self.brain_game_window_info_timer_right_widget_vertical_layout.addWidget(self.left_signal_widget)
        self.brain_game_window_info_timer_left_widget_vertical_layout.addWidget(self.right_signal_widget)

        self.PLAYER_INFO_HORIZONTAL_LAYOUTS: list[QHBoxLayout] = [
            self.brain_game_player_info_widget_01_horizontal_layout,
            self.brain_game_player_info_widget_02_horizontal_layout,
            self.brain_game_player_info_widget_03_horizontal_layout,
            self.brain_game_player_info_widget_04_horizontal_layout,
            self.brain_game_player_info_widget_05_horizontal_layout,
            self.brain_game_player_info_widget_06_horizontal_layout,
        ]

    def populate_player_info_horizontal_layout(
        self,
        layout: QHBoxLayout,
        left_widget: ScalableColoredSvgWidget,
        central_widget: ScalableLabel,
        right_widget: ScalableLabel,
    ):
        """Заполняет виджетами указанный горизонтальный layout на панели информации об игроках."""
        layout.insertWidget(0, left_widget, alignment=Qt.AlignmentFlag.AlignCenter)
        layout.insertWidget(1, central_widget)
        layout.insertWidget(2, right_widget)

    def clear_all_player_info_horizontal_layouts(self) -> None:
        """Удаляет все виджеты с панели информации об игроках."""
        for layout in self.PLAYER_INFO_HORIZONTAL_LAYOUTS:
            while layout.count():
                item = layout.takeAt(0)
                if widget := item.widget():
                    widget.deleteLater()

    def add_widget_to_blocked_players_indicator_layout(self, widget: ScalableColoredSvgWidget):
        """Добавляет виджет на layout, отображающий заблокированных игроков."""
        self.brain_game_window_blocked_players_indicator_widget_horizontal_layout.insertWidget(
            self.max_displayed_blocked_player_indicator_idx, widget, alignment=Qt.AlignmentFlag.AlignCenter,
        )
        self.max_displayed_blocked_player_indicator_idx += 1

    def clear_blocked_players_indicator_layout(self):
        """Удаляет все виджеты с layout-а, отображающего заблокированных игроков."""
        while self.brain_game_window_blocked_players_indicator_widget_horizontal_layout.count():
            item = self.brain_game_window_blocked_players_indicator_widget_horizontal_layout.takeAt(0)
            if widget := item.widget():
                widget.deleteLater()
        self.max_displayed_blocked_player_indicator_idx = 0

    def activate_time_start_signal(self):
        """Активирует цветовой сигнал на информационном окне при старте таймера."""
        self.left_signal_widget.show()
        self.right_signal_widget.show()

    def deactivate_time_start_signal(self):
        """Деактивирует цветовой сигнал на информационном окне при старте таймера."""
        self.left_signal_widget.hide()
        self.right_signal_widget.hide()

    @property
    def first_unpopulated_player_info_layout(self) -> QHBoxLayout:
        """Возвращает первый сверху layout, на котором отсутствуют виджеты."""
        for layout in self.PLAYER_INFO_HORIZONTAL_LAYOUTS:
            if not layout.count():
                return layout
        raise LookupError('Found no unpopulated player info layouts')
