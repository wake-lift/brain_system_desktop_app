from pathlib import Path
from PyQt6.QtCore import Qt, QUrl
from PyQt6.QtGui import QKeyEvent
from PyQt6.QtMultimedia import QAudioOutput, QMediaPlayer
from PyQt6.QtWidgets import QLayout, QMainWindow

from config.config import AppConfig
from config.handlers import (
    black_player_check_box_handler,
    black_player_set_team_name_line_edit_handler,
    blue_player_check_box_handler,
    blue_player_set_team_name_line_edit_handler,
    brain_ring_round_duration_spin_box_handler,
    choose_brain_ring_radio_button_handler,
    choose_erudite_radio_button_handler,
    choose_www_radio_button_handler,
    green_player_check_box_handler,
    green_player_set_team_name_line_edit_handler,
    red_player_check_box_handler,
    red_player_set_team_name_line_edit_handler,
    reset_settings_button_handler,
    save_settings_button_handler,
    white_player_check_box_handler,
    white_player_set_team_name_line_edit_handler,
    yellow_player_check_box_handler,
    yellow_player_set_team_name_line_edit_handler,
)
from config.enums import GameTypeEnum, SoundFilesEnum
from core.timer import CustomTimer
from game_modes.brain_ring.game import BrainRingGame
from game_modes.erudite.handlers import erudite_player_key_press_handler
from game_modes.player import Player
from game_modes.brain_ring.enums import BrainRingGameStatusEnum
from game_modes.brain_ring.handlers import (
    brain_ring_moderator_reset_pause_push_button_handler,
    brain_ring_moderator_reset_round_push_button_handler,
    brain_ring_moderator_start_resume_push_button_handler,
    brain_ring_player_key_press_handler,
)
from game_modes.what_where_when.game import WWWGame
from game_modes.what_where_when.handlers import (
    set_www_game_info_label_text,
    www_choose_blitz_radio_button_handler,
    www_choose_regular_question_radio_button_handler,
    www_choose_super_blitz_radio_button_handler,
    www_moderator_reset_push_button_handler,
    www_moderator_start_resume_push_button_handler,
    www_player_key_press_handler,
    www_time_to_provide_answers_check_box_handler,
    www_timer_run_out_event_handler,
    www_timer_start_event_handler,
    www_timer_timer_reset_event_handler,
    www_timer_timer_ten_seconds_left_handler,
)
from keyboard.enums import ModeratorPressedKeyEnum, PlayerPressedKeyEnum
from sounds.handlers import (
    pause_or_resume_audio_track_handler,
    select_audio_track_handler,
    set_audio_output_volume_handler,
    start_audio_track_handler,
    stop_audio_track_handler,
)
from ui.autogenerated.main_window_autogenerated import Ui_MainWindow
from ui.widgets.brain_ring_moderator_game_widget import BrainRingModeratorGameWidget
from ui.widgets.www_moderator_game_widget import WWWModeratorGameWidget


class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.app_config = AppConfig()

        self.current_audio_file: QUrl | None = None

        self.setFocusPolicy(Qt.FocusPolicy.StrongFocus)

        self.brain_ring_timer = CustomTimer(initial_time=self.app_config.brain_ring_round_time)
        self.www_timer = CustomTimer(initial_time=self.app_config.www_regular_time, precision=100)

        self._setup_audio_player()
        self._populate_settings_widgets()
        self._setup_tab_widgets()
        self._setup_game()
        self._setup_game_widgets()
        self._setup_settings_handlers()
        self._setup_main_window_moderator_controls()
        self.MAP_BUTTONS_TO_ENABLED_PLAYERS = self._setup_players()
        self.enabled_players: list[Player] = list(self.MAP_BUTTONS_TO_ENABLED_PLAYERS.values())
        self._setup_brain_ring_info_labels()

    @property
    def game_type(self) -> GameTypeEnum:
        if self.app_config.game_type == GameTypeEnum.BRAIN_RING.value:
            return GameTypeEnum.BRAIN_RING
        if self.app_config.game_type == GameTypeEnum.WWW.value:
            return GameTypeEnum.WWW
        if self.app_config.game_type == GameTypeEnum.ERUDITE.value:
            return GameTypeEnum.ERUDITE
        return GameTypeEnum.BRAIN_RING

    def keyPressEvent(self, event: QKeyEvent) -> None:
        pressed_key: str = event.text()
        if pressed_key in {member.value for member in PlayerPressedKeyEnum}:
            try:
                player: Player = self.MAP_BUTTONS_TO_ENABLED_PLAYERS[PlayerPressedKeyEnum(pressed_key)]
            except (KeyError):
                return
            else:
                if self.game_type == GameTypeEnum.BRAIN_RING:
                    brain_ring_player_key_press_handler(self, player)
                elif self.game_type == GameTypeEnum.WWW:
                    www_player_key_press_handler(self, player)
                elif self.game_type == GameTypeEnum.ERUDITE:
                    erudite_player_key_press_handler(self, player)

        elif pressed_key in {member.value for member in ModeratorPressedKeyEnum}:
            if self.game_type == GameTypeEnum.BRAIN_RING:
                if ModeratorPressedKeyEnum(pressed_key) == ModeratorPressedKeyEnum.START_RESUME:
                    brain_ring_moderator_start_resume_push_button_handler(self)
                elif ModeratorPressedKeyEnum(pressed_key) == ModeratorPressedKeyEnum.RESET_PAUSE:
                    brain_ring_moderator_reset_pause_push_button_handler(self)
                elif ModeratorPressedKeyEnum(pressed_key) == ModeratorPressedKeyEnum.RESET_ROUND:
                    brain_ring_moderator_reset_round_push_button_handler(self)
            elif self.game_type == GameTypeEnum.WWW:
                if ModeratorPressedKeyEnum(pressed_key) == ModeratorPressedKeyEnum.START_RESUME:
                    www_moderator_start_resume_push_button_handler(self)
                elif ModeratorPressedKeyEnum(pressed_key) == ModeratorPressedKeyEnum.RESET_ROUND:
                    www_moderator_reset_push_button_handler(self)

            elif self.game_type == GameTypeEnum.ERUDITE:
                pass

    def reset_all_enabled_players(self):
        for player in self.enabled_players:
            player.is_blocked = False
            player.is_already_displayed_on_widget = False

    def reset_all_enabled_players_widget_display(self):
        for player in self.enabled_players:
            player.is_already_displayed_on_widget = False

    def play_sound_file(self, sound_file_name: SoundFilesEnum):
        path_to_file = Path(__file__).absolute().parent.parent / 'assets' / 'sounds' / sound_file_name.value
        audio_file = QUrl.fromLocalFile(str(path_to_file))
        self.audio_player.setSource(audio_file)
        self.audio_player.play()

    def set_brain_ring_info_label(
        self,
        player: Player,
        game_status: BrainRingGameStatusEnum,
        remaining_time: int | None = None,
        diff_time: float | None = None,
    ):
        for color_box, info_label in self.MAP_BRAIN_RING_INFO_LABELS.items():
            if color_box.isHidden():
                color_box.setStyleSheet(f'background-color: {player.color}; border: 3px solid black;')
                if game_status == BrainRingGameStatusEnum.PLAYER_BUTTON_PRESSED:
                    if remaining_time is not None:
                        info_label.setStyleSheet('font-weight: bold;')
                        info_label.setText(f'{player.name}: {remaining_time} sec')
                    elif diff_time is not None:
                        info_label.setText(f'{player.name}: + {diff_time} sec')
                else:
                    info_label.setText(f'{player.name}: {game_status.label}')
                color_box.show()
                info_label.show()
                break

    def clear_brain_ring_info_labels(self):
        for color_box, info_label in self.MAP_BRAIN_RING_INFO_LABELS.items():
            color_box.hide()
            info_label.hide()

    def clear_layout(self, layout: type[QLayout]):
        while layout.count():
            item = layout.takeAt(0)
            widget = item.widget()
            if widget:
                widget.deleteLater()

    def _setup_audio_player(self):
        self.audio_player = QMediaPlayer()
        self.audio_output = QAudioOutput()
        self.audio_player.setAudioOutput(self.audio_output)
        self.audio_output.setVolume(self.sound_panel_vertical_slider.value() / 100)

        self.select_sound_combo_box.addItems(item.label for item in SoundFilesEnum if 'Брейн-ринг' not in item.label)
        self.select_sound_combo_box.setCurrentIndex(-1)

        self.select_sound_combo_box.currentTextChanged.connect(
            slot=lambda handler: select_audio_track_handler(self, handler),
        )
        self.sound_panel_start_button.clicked.connect(slot=lambda handler: start_audio_track_handler(self))
        self.sound_panel_pause_button.clicked.connect(slot=lambda handler: pause_or_resume_audio_track_handler(self))
        self.sound_panel_stop_button.clicked.connect(slot=lambda handler: stop_audio_track_handler(self))
        self.sound_panel_vertical_slider.valueChanged.connect(
            slot=lambda handler: set_audio_output_volume_handler(self, handler),
        )

    def _populate_settings_widgets(self):
        if self.game_type == GameTypeEnum.BRAIN_RING:
            self.choose_www_radio_button.setChecked(False)
            self.choose_erudite_radio_button.setChecked(False)
            self.choose_brain_ring_radio_button.setChecked(True)
        elif self.game_type == GameTypeEnum.WWW:
            self.choose_brain_ring_radio_button.setChecked(False)
            self.choose_erudite_radio_button.setChecked(False)
            self.choose_www_radio_button.setChecked(True)
        elif self.game_type == GameTypeEnum.ERUDITE:
            self.choose_brain_ring_radio_button.setChecked(False)
            self.choose_www_radio_button.setChecked(False)
            self.choose_erudite_radio_button.setChecked(True)

        self.brain_ring_round_duration_spin_box.setValue(self.app_config.brain_ring_round_time)

        self.red_player_check_box.setChecked(self.app_config.red_button_enabled)
        self.red_player_set_team_name_line_edit.setText(self.app_config.red_button_player_name)
        self.green_player_check_box.setChecked(self.app_config.green_button_enabled)
        self.green_player_set_team_name_line_edit.setText(self.app_config.green_button_player_name)
        self.blue_player_check_box.setChecked(self.app_config.blue_button_enabled)
        self.blue_player_set_team_name_line_edit.setText(self.app_config.blue_button_player_name)
        self.yellow_player_check_box.setChecked(self.app_config.yellow_button_enabled)
        self.yellow_player_set_team_name_line_edit.setText(self.app_config.yellow_button_player_name)
        self.white_player_check_box.setChecked(self.app_config.white_button_enabled)
        self.white_player_set_team_name_line_edit.setText(self.app_config.white_button_player_name)
        self.black_player_check_box.setChecked(self.app_config.black_button_enabled)
        self.black_player_set_team_name_line_edit.setText(self.app_config.black_button_player_name)

    def _setup_tab_widgets(self):
        self.settings_game_screen_tab_widget.currentChanged.connect(self._sync_game_and_moderator_control_tabs)
        self.moderator_control_panel_tab_widget.currentChanged.connect(self._sync_game_and_moderator_control_tabs)

    def _setup_settings_handlers(self):
        self.choose_brain_ring_radio_button.clicked.connect(
            slot=lambda handler: choose_brain_ring_radio_button_handler(self),
        )
        self.choose_www_radio_button.clicked.connect(slot=lambda handler: choose_www_radio_button_handler(self))
        self.choose_erudite_radio_button.clicked.connect(slot=lambda handler: choose_erudite_radio_button_handler(self))

        self.brain_ring_round_duration_spin_box.editingFinished.connect(
            slot=lambda: brain_ring_round_duration_spin_box_handler(self),
        )

        self.red_player_check_box.stateChanged.connect(slot=lambda handler: red_player_check_box_handler(self, handler))
        self.green_player_check_box.stateChanged.connect(
            slot=lambda handler: green_player_check_box_handler(self, handler),
        )
        self.blue_player_check_box.stateChanged.connect(
            slot=lambda handler: blue_player_check_box_handler(self, handler),
        )
        self.yellow_player_check_box.stateChanged.connect(
            slot=lambda handler: yellow_player_check_box_handler(self, handler),
        )
        self.white_player_check_box.stateChanged.connect(
            slot=lambda handler: white_player_check_box_handler(self, handler),
        )
        self.black_player_check_box.stateChanged.connect(
            slot=lambda handler: black_player_check_box_handler(self, handler),
        )

        self.red_player_set_team_name_line_edit.editingFinished.connect(
            slot=lambda: red_player_set_team_name_line_edit_handler(self),
        )
        self.green_player_set_team_name_line_edit.editingFinished.connect(
            slot=lambda: green_player_set_team_name_line_edit_handler(self),
        )
        self.blue_player_set_team_name_line_edit.editingFinished.connect(
            slot=lambda: blue_player_set_team_name_line_edit_handler(self),
        )
        self.yellow_player_set_team_name_line_edit.editingFinished.connect(
            slot=lambda: yellow_player_set_team_name_line_edit_handler(self),
        )
        self.white_player_set_team_name_line_edit.editingFinished.connect(
            slot=lambda: white_player_set_team_name_line_edit_handler(self),
        )
        self.black_player_set_team_name_line_edit.editingFinished.connect(
            slot=lambda: black_player_set_team_name_line_edit_handler(self),
        )

        self.save_settings_button.clicked.connect(slot=lambda handler: save_settings_button_handler(self))
        self.reset_settings_button.clicked.connect(slot=lambda handler: reset_settings_button_handler(self))

    def _setup_main_window_moderator_controls(self):
        self.brain_ring_moderator_start_resume_push_button.clicked.connect(
            slot=lambda handler: brain_ring_moderator_start_resume_push_button_handler(self),
        )
        self.brain_ring_moderator_reset_pause_push_button.clicked.connect(
            slot=lambda handler: brain_ring_moderator_reset_pause_push_button_handler(self),
        )
        self.brain_ring_moderator_reset_round_push_button.clicked.connect(
            slot=lambda handler: brain_ring_moderator_reset_round_push_button_handler(self),
        )
        self.www_moderator_start_resume_push_button.clicked.connect(
            slot=lambda handler: www_moderator_start_resume_push_button_handler(self),
        )
        self.www_moderator_reset_push_button.clicked.connect(
            slot=lambda handler: www_moderator_reset_push_button_handler(self),
        )
        self.www_choose_regular_question_radio_button.setChecked(True)
        self.www_choose_blitz_radio_button.setChecked(False)
        self.www_choose_super_blitz_radio_button.setChecked(False)
        self.www_choose_regular_question_radio_button.clicked.connect(
            slot=lambda handler: www_choose_regular_question_radio_button_handler(self),
        )
        self.www_choose_blitz_radio_button.clicked.connect(
            slot=lambda handler: www_choose_blitz_radio_button_handler(self),
        )
        self.www_choose_super_blitz_radio_button.clicked.connect(
            slot=lambda handler: www_choose_super_blitz_radio_button_handler(self),
        )
        self.www_time_to_provide_answers_check_box.stateChanged.connect(
            slot=lambda handler: www_time_to_provide_answers_check_box_handler(self, handler),
        )

    def _setup_game(self):
        if self.game_type == GameTypeEnum.BRAIN_RING:
            self.current_game = BrainRingGame(
                status=BrainRingGameStatusEnum.READY_TO_START_COUNTDOWN,
                is_false_start_active=False
            )
            self.moderator_brain_game_status_label.setText(f'{BrainRingGameStatusEnum.READY_TO_START_COUNTDOWN.value}')
        elif self.game_type == GameTypeEnum.WWW:
            self.current_game = WWWGame()
            self.www_timer.timer_start.connect(slot=lambda: www_timer_start_event_handler(self))
            self.www_timer.timer_run_out.connect(slot=lambda: www_timer_run_out_event_handler(self))
            self.www_timer.timer_reset.connect(slot=lambda: www_timer_timer_reset_event_handler(self))
            self.www_timer.timer_ten_seconds_left.connect(slot=lambda: www_timer_timer_ten_seconds_left_handler(self))
        elif self.game_type == GameTypeEnum.ERUDITE:
            self.current_game = None

    def _setup_game_widgets(self):
        self.main_window_brain_info_timer_label = BrainRingModeratorGameWidget(
            parent=self.brain_ring_game_display_tab,
            timer=self.brain_ring_timer,
            audio_player=self.audio_player,
            audio_output=self.audio_output,
        )
        self.main_window_brain_info_timer_widget_vertical_layout.addWidget(self.main_window_brain_info_timer_label)
        self.main_window_www_timer_label = WWWModeratorGameWidget(
            parent=self.www_game_display_tab,
            timer=self.www_timer,
            audio_player=self.audio_player,
            audio_output=self.audio_output,
        )
        self.main_window_www_timer_widget_vertical_layout.addWidget(self.main_window_www_timer_label)
        if isinstance(self.current_game, WWWGame):
            set_www_game_info_label_text(self)

    def _setup_players(self):
        self.red_player = Player(self, button_color=PlayerPressedKeyEnum.RED)
        self.green_player = Player(self, button_color=PlayerPressedKeyEnum.GREEN)
        self.yellow_player = Player(self, button_color=PlayerPressedKeyEnum.YELLOW)
        self.blue_player = Player(self, button_color=PlayerPressedKeyEnum.BLUE)
        self.white_player = Player(self, button_color=PlayerPressedKeyEnum.WHITE)
        self.black_player = Player(self, button_color=PlayerPressedKeyEnum.BLACK)
        all_players = [
            self.red_player,
            self.green_player,
            self.yellow_player,
            self.blue_player,
            self.white_player,
            self.black_player,
        ]
        MAP_BUTTONS_TO_ENABLED_PLAYERS: dict[PlayerPressedKeyEnum, Player] = {}
        for pressed_key, player in zip(PlayerPressedKeyEnum, all_players):
            if player.is_enbled:
                MAP_BUTTONS_TO_ENABLED_PLAYERS[pressed_key] = player
        return MAP_BUTTONS_TO_ENABLED_PLAYERS

    def _setup_brain_ring_info_labels(self):
        self.main_window_brain_color_box_01.hide()
        self.main_window_brain_color_box_02.hide()
        self.main_window_brain_color_box_03.hide()
        self.main_window_brain_color_box_04.hide()
        self.main_window_brain_color_box_05.hide()
        self.main_window_brain_color_box_06.hide()
        self.main_window_brain_color_box_06.hide()
        self.main_window_brain_info_label_01.hide()
        self.main_window_brain_info_label_02.hide()
        self.main_window_brain_info_label_03.hide()
        self.main_window_brain_info_label_04.hide()
        self.main_window_brain_info_label_05.hide()
        self.main_window_brain_info_label_06.hide()

        self.MAP_BRAIN_RING_INFO_LABELS = {
            self.main_window_brain_color_box_01: self.main_window_brain_info_label_01,
            self.main_window_brain_color_box_02: self.main_window_brain_info_label_02,
            self.main_window_brain_color_box_03: self.main_window_brain_info_label_03,
            self.main_window_brain_color_box_04: self.main_window_brain_info_label_04,
            self.main_window_brain_color_box_05: self.main_window_brain_info_label_05,
            self.main_window_brain_color_box_06: self.main_window_brain_info_label_06,
        }

    def _sync_game_and_moderator_control_tabs(self, index):
        sender_widget = self.sender()
        self.settings_game_screen_tab_widget.blockSignals(True)
        self.moderator_control_panel_tab_widget.blockSignals(True)
        if sender_widget == self.settings_game_screen_tab_widget and index in [1, 2, 3]:
            self.moderator_control_panel_tab_widget.setCurrentIndex(index - 1)
        elif sender_widget == self.settings_game_screen_tab_widget and index == 0:
            self.settings_game_screen_tab_widget.setCurrentIndex(index)
        else:
            self.settings_game_screen_tab_widget.setCurrentIndex(index + 1)
        self.settings_game_screen_tab_widget.blockSignals(False)
        self.moderator_control_panel_tab_widget.blockSignals(False)
