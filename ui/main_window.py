from PyQt6.QtCore import Qt, QUrl
from PyQt6.QtGui import QKeyEvent
from PyQt6.QtMultimedia import QAudioOutput, QMediaPlayer
from PyQt6.QtWidgets import QMainWindow

from config.config import AppConfig
from config.handlers import (
    black_player_check_box_handler,
    black_player_set_team_name_line_edit_handler,
    blue_player_check_box_handler,
    blue_player_set_team_name_line_edit_handler,
    brain_ring_round_duration_spin_box_handler,
    choose_brain_ring_radio_button_handler,
    choose_erudite_radio_button_handler,
    choose_www_radio_button_handler,
    green_player_check_box_handler,
    green_player_set_team_name_line_edit_handler,
    red_player_check_box_handler,
    red_player_set_team_name_line_edit_handler,
    reset_settings_button_handler,
    save_settings_button_handler,
    white_player_check_box_handler,
    white_player_set_team_name_line_edit_handler,
    yellow_player_check_box_handler,
    yellow_player_set_team_name_line_edit_handler,
)
from config.enums import GameTypeEnum, SoundFilesEnum
from core.timer import CustomTimer
from game_modes.handlers_brain_ring import (
    brain_ring_reset_push_button_handler,
    brain_ring_pause_resume_push_button_handler,
    brain_ring_start_push_button_handler,
)
from keyboard.enums import PressedKeyEnum
from keyboard.handlers import brain_ring_key_press_handler, erudite_key_press_handler, www_key_press_handler
from sounds.handlers import (
    pause_or_resume_audio_track_handler,
    select_audio_track_handler,
    set_audio_output_volume_handler,
    start_audio_track_handler,
    stop_audio_track_handler,
)
from ui.autogenerated.main_window_autogenerated import Ui_MainWindow
from ui.widgets.brain_ring_moderator_game_widget import BrainRingModeratorGameWidget


class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.app_config = AppConfig()

        self.current_audio_file: QUrl | None = None

        self.setFocusPolicy(Qt.FocusPolicy.StrongFocus)

        self.timer = CustomTimer(initial_time=self.app_config.brain_ring_round_time)

        self._setup_audio_player()
        self._populate_settings_widgets()
        self._setup_game_widgets()
        self._setup_settings_handlers()
        self._setup_main_window_buttons()


        # self.main_window_brain_color_box_01.setStyleSheet("""
        #     background-color: red;
        #     border: 3px solid black;
        # """)
        # self.main_window_brain_color_box_01.hide()
        # self.main_window_brain_color_box_01.show()


    @property
    def game_type(self) -> GameTypeEnum:
        if self.app_config.game_type == GameTypeEnum.BRAIN_RING.value:
            return GameTypeEnum.BRAIN_RING
        if self.app_config.game_type == GameTypeEnum.WWW.value:
            return GameTypeEnum.WWW
        if self.app_config.game_type == GameTypeEnum.ERUDITE.value:
            return GameTypeEnum.ERUDITE
        return GameTypeEnum.BRAIN_RING

    def keyPressEvent(self, event: QKeyEvent) -> None:
        try:
            pressed_key = PressedKeyEnum(event.text())
        except ValueError:
            return

        if self.game_type == GameTypeEnum.BRAIN_RING:
            brain_ring_key_press_handler(self, pressed_key)
        elif self.game_type == GameTypeEnum.WWW:
            www_key_press_handler(self, pressed_key)
        elif self.game_type == GameTypeEnum.ERUDITE:
            erudite_key_press_handler(self, pressed_key)

        # super().keyPressEvent(event)

    def _setup_audio_player(self):
        self.audio_player = QMediaPlayer()
        self.audio_output = QAudioOutput()
        self.audio_player.setAudioOutput(self.audio_output)
        self.audio_output.setVolume(self.sound_panel_vertical_slider.value() / 100)

        self.select_sound_combo_box.addItems(item.label for item in SoundFilesEnum if 'Брейн-ринг' not in item.label)
        self.select_sound_combo_box.setCurrentIndex(-1)

        self.select_sound_combo_box.currentTextChanged.connect(
            slot=lambda handler: select_audio_track_handler(self, handler),
        )
        self.sound_panel_start_button.clicked.connect(slot=lambda handler: start_audio_track_handler(self))
        self.sound_panel_pause_button.clicked.connect(slot=lambda handler: pause_or_resume_audio_track_handler(self))
        self.sound_panel_stop_button.clicked.connect(slot=lambda handler: stop_audio_track_handler(self))
        self.sound_panel_vertical_slider.valueChanged.connect(
            slot=lambda handler: set_audio_output_volume_handler(self, handler),
        )

    def _populate_settings_widgets(self):
        if self.game_type == GameTypeEnum.BRAIN_RING:
            self.choose_www_radio_button.setChecked(False)
            self.choose_erudite_radio_button.setChecked(False)
            self.choose_brain_ring_radio_button.setChecked(True)
        elif self.game_type == GameTypeEnum.WWW:
            self.choose_brain_ring_radio_button.setChecked(False)
            self.choose_erudite_radio_button.setChecked(False)
            self.choose_www_radio_button.setChecked(True)
        elif self.game_type == GameTypeEnum.ERUDITE:
            self.choose_brain_ring_radio_button.setChecked(False)
            self.choose_www_radio_button.setChecked(False)
            self.choose_erudite_radio_button.setChecked(True)

        self.brain_ring_round_duration_spin_box.setValue(self.app_config.brain_ring_round_time)

        self.red_player_check_box.setChecked(self.app_config.red_button_enabled)
        self.red_player_set_team_name_line_edit.setText(self.app_config.red_button_player_name)
        self.green_player_check_box.setChecked(self.app_config.green_button_enabled)
        self.green_player_set_team_name_line_edit.setText(self.app_config.green_button_player_name)
        self.blue_player_check_box.setChecked(self.app_config.blue_button_enabled)
        self.blue_player_set_team_name_line_edit.setText(self.app_config.blue_button_player_name)
        self.yellow_player_check_box.setChecked(self.app_config.yellow_button_enabled)
        self.yellow_player_set_team_name_line_edit.setText(self.app_config.yellow_button_player_name)
        self.white_player_check_box.setChecked(self.app_config.white_button_enabled)
        self.white_player_set_team_name_line_edit.setText(self.app_config.white_button_player_name)
        self.black_player_check_box.setChecked(self.app_config.black_button_enabled)
        self.black_player_set_team_name_line_edit.setText(self.app_config.black_button_player_name)

    def _setup_game_widgets(self):
        self.main_window_brain_info_timer_label = BrainRingModeratorGameWidget(
            parent=self.brain_ring_game_display_tab,
            timer=self.timer,
            audio_player=self.audio_player,
            audio_output=self.audio_output,
        )
        self.main_window_brain_info_timer_widget_vertical_layout.addWidget(self.main_window_brain_info_timer_label)

    def _setup_settings_handlers(self):
        self.choose_brain_ring_radio_button.clicked.connect(
            slot=lambda handler: choose_brain_ring_radio_button_handler(self),
        )
        self.choose_www_radio_button.clicked.connect(slot=lambda handler: choose_www_radio_button_handler(self))
        self.choose_erudite_radio_button.clicked.connect(slot=lambda handler: choose_erudite_radio_button_handler(self))

        self.brain_ring_round_duration_spin_box.editingFinished.connect(
            slot=lambda: brain_ring_round_duration_spin_box_handler(self),
        )

        self.red_player_check_box.stateChanged.connect(slot=lambda handler: red_player_check_box_handler(self, handler))
        self.green_player_check_box.stateChanged.connect(
            slot=lambda handler: green_player_check_box_handler(self, handler),
        )
        self.blue_player_check_box.stateChanged.connect(
            slot=lambda handler: blue_player_check_box_handler(self, handler),
        )
        self.yellow_player_check_box.stateChanged.connect(
            slot=lambda handler: yellow_player_check_box_handler(self, handler),
        )
        self.white_player_check_box.stateChanged.connect(
            slot=lambda handler: white_player_check_box_handler(self, handler),
        )
        self.black_player_check_box.stateChanged.connect(
            slot=lambda handler: black_player_check_box_handler(self, handler),
        )

        self.red_player_set_team_name_line_edit.editingFinished.connect(
            slot=lambda: red_player_set_team_name_line_edit_handler(self),
        )
        self.green_player_set_team_name_line_edit.editingFinished.connect(
            slot=lambda: green_player_set_team_name_line_edit_handler(self),
        )
        self.blue_player_set_team_name_line_edit.editingFinished.connect(
            slot=lambda: blue_player_set_team_name_line_edit_handler(self),
        )
        self.yellow_player_set_team_name_line_edit.editingFinished.connect(
            slot=lambda: yellow_player_set_team_name_line_edit_handler(self),
        )
        self.white_player_set_team_name_line_edit.editingFinished.connect(
            slot=lambda: white_player_set_team_name_line_edit_handler(self),
        )
        self.black_player_set_team_name_line_edit.editingFinished.connect(
            slot=lambda: black_player_set_team_name_line_edit_handler(self),
        )

        self.save_settings_button.clicked.connect(slot=lambda handler: save_settings_button_handler(self))
        self.reset_settings_button.clicked.connect(slot=lambda handler: reset_settings_button_handler(self))

    def _setup_main_window_buttons(self):
        self.brain_ring_start_push_button.clicked.connect(
            slot=lambda handler: brain_ring_start_push_button_handler(self),
        )
        self.brain_ring_pause_resume_push_button.clicked.connect(
            slot=lambda handler: brain_ring_pause_resume_push_button_handler(self),
        )
        self.brain_ring_reset_push_button.clicked.connect(
            slot=lambda handler: brain_ring_reset_push_button_handler(self),
        )
